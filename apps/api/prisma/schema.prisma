generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  email        String    @unique
  gpt3ApiToken String?
  projects     Project[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  User        User         @relation(fields: [userId], references: [id])
  userId      String
  prompts     Prompt[]
  chains      Chain[]
  userFolders UserFolder[]
}

model Prompt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String?

  Project        Project?        @relation(fields: [projectId], references: [id])
  projectId      String?
  promptVersions PromptVersion[]
}

model PromptVersion {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content String

  previousVersionId String?        @unique
  previousVersion   PromptVersion? @relation("history", fields: [previousVersionId], references: [id])
  nextVersionId     PromptVersion? @relation("history")
  promptOutputs     PromptOutput[]
  Prompt            Prompt?        @relation(fields: [promptId], references: [id])
  promptId          String?
}

model PromptOutput {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content String

  PromptVersion   PromptVersion @relation(fields: [promptVersionId], references: [id])
  promptVersionId String
}

model Chain {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  content String

  Project   Project    @relation(fields: [projectId], references: [id])
  projectId String
  ChainRun  ChainRun[]
}

model ChainRun {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content String
  number  Int

  Chain   Chain  @relation(fields: [chainId], references: [id])
  chainId String
}

model UserFolder {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  Project     Project       @relation(fields: [projectId], references: [id])
  projectId   String
  dataObjects DataObjects[]
}

model DataObjects {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type  String
  value String

  UserFolder   UserFolder @relation(fields: [userFolderId], references: [id])
  userFolderId String
}
